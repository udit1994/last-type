{"version":3,"sources":[".././extension.js","../external \"vscode\"","../webpack/bootstrap","../webpack/startup"],"names":["vscode","timerId","module","exports","activate","context","dateTime","idle","onInit","commands","registerCommand","statusBarItem","window","createStatusBarItem","command","start","setInterval","text","workspace","onDidChangeTextDocument","clearInterval","Date","toString","show","showInformationMessage","subscriptions","push","executeCommand","deactivate","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"0CAAA,MAAMA,EAAS,EAAQ,KACvB,IAAIC,EA0DJC,EAAOC,QAAU,CACfC,SAtDF,SAAkBC,GAChB,IAAIC,EACAC,EAAO,EAEX,MAAMC,EAASR,EAAOS,SAASC,gBAAgB,kBAAkB,WAC/D,MAAMC,EAAgBX,EAAOY,OAAOC,oBAAoB,EAAG,IAC3DF,EAAcG,QAAU,kBAExB,MAAMC,EAAQ,KACZd,EAAUe,aAAY,KACpBT,IAEAI,EAAcM,KAAO,iBAAiBV,KAC3B,IAATA,EAAa,SAAW,kBAEzB,MAGLP,EAAOkB,UAAUC,yBAAwB,KACvCC,cAAcnB,GAEdK,GAAW,IAAIe,MAAOC,WACtBf,EAAO,EACPI,EAAcM,KAAO,WAErBF,OAGFJ,EAAcM,KAAO,WACrBX,GAAW,IAAIe,MAAOC,WAEtBP,IAEAJ,EAAcY,UAGhBvB,EAAOS,SAASC,gBAAgB,mBAAmB,WACjDV,EAAOY,OAAOY,uBACZ,iBAAiBjB,KACN,IAATA,EAAa,SAAW,qBACdD,QAIhBD,EAAQoB,cAAcC,KAAKlB,GAC3BR,EAAOS,SAASkB,eAAe,mBAU/BC,WANF,WACER,cAAcnB,M,qBCxDhBC,EAAOC,QAAU0B,QAAQ,YCCrBC,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAU7B,QAG3C,IAAID,EAAS4B,EAAyBE,GAAY,CAGjD7B,QAAS,IAOV,OAHA8B,EAAoBD,GAAU9B,EAAQA,EAAOC,QAAS4B,GAG/C7B,EAAOC,QCjBR4B,CAAoB,M","file":"extension.js","sourcesContent":["const vscode = require(\"vscode\");\nlet timerId;\n\n/**\n * @param {vscode.ExtensionContext} context\n */\nfunction activate(context) {\n  let dateTime;\n  let idle = 0;\n\n  const onInit = vscode.commands.registerCommand(\"last-type.init\", function () {\n    const statusBarItem = vscode.window.createStatusBarItem(1, 10);\n    statusBarItem.command = \"last-type.click\";\n\n    const start = () => {\n      timerId = setInterval(() => {\n        idle++;\n\n        statusBarItem.text = `Last activity ${idle} ${\n          idle === 1 ? \"minute\" : \"minutes\"\n        } ago`;\n      }, 60000);\n    };\n\n    vscode.workspace.onDidChangeTextDocument(() => {\n      clearInterval(timerId);\n\n      dateTime = new Date().toString();\n      idle = 0;\n      statusBarItem.text = `just now`;\n\n      start();\n    });\n\n    statusBarItem.text = `just now`;\n    dateTime = new Date().toString();\n\n    start();\n\n    statusBarItem.show();\n  });\n\n  vscode.commands.registerCommand(\"last-type.click\", function () {\n    vscode.window.showInformationMessage(\n      `Last activity ${idle} ${\n        idle === 1 ? \"minute\" : \"minutes\"\n      } ago, at ${dateTime}`\n    );\n  });\n\n  context.subscriptions.push(onInit);\n  vscode.commands.executeCommand(\"last-type.init\");\n}\n\n// this method is called when your extension is deactivated\nfunction deactivate() {\n  clearInterval(timerId);\n}\n\nmodule.exports = {\n  activate,\n  deactivate,\n};\n","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(554);\n"],"sourceRoot":""}